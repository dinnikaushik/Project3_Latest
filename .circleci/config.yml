version: 2.1
  
orbs:
# Good for AWS CLI
  aws-cli: circleci/aws-cli@2.0.6


defaults: &defaults-node
  docker:
    - image: circleci/node:13.8.0
  working_directory: ~/project
  
environment:
  AWS_PAGER: ""
  BACKEND_IP: AWS::EC2PublicIP
  # ID: CIRCLE_WORKFLOW_ID:0:7

commands:

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks << parameters.workflow_id >> a workflow ID.
    parameters: 
      workflow_id:
        type: string
      event:
        type: string
           
    steps:
      - run:
          name: Destroy environments
          when: on_fail   
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            echo "Destroying environment: << parameters.workflow_id >> "
            aws s3 rm s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # aws s3 rb s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
      event:
        type: string    
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            if ((curl -s http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-west-1.amazonaws.com/ | grep "Hello"));
            then
            # SUCCESS = 1
            # if(( $SUCCESS==1 )); 
            # then
              cd ./project/backend
              npm install
            #  Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

  print_workflow_id:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>    


jobs:

  build-frontend:
    <<: *defaults-node
    # docker:
    #   - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      
      - run: echo ${CIRCLE_WORKFLOW_ID:0:7}

      # - print_workflow_id:
      #     id: <<pipeline.id>>
     
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
            cd dist
            ls -la
            npm i webpack-sources
            npm i webpack
            npm i webpack-cli
            npm i yargs
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults-node
    # docker:

    #   - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Backend build
          command: |
            cd backend
            npm i 
            npm install pg
            npm run --force build
            cd dist
            ls -la
            # Zip the directory
            cd ../..
            pwd 
            ls -la
            tar -C backend -czvf backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz .
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  
  test-frontend:
    <<: *defaults-node
    # docker:
    #   - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm i
            # npm audit fix --force
            npm run test
                
  test-backend:
    parallelism: 10
    # <<: *defaults-node
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test back-end
          command: |
            cd backend
            npm i 
            npm install --save-dev jest
            npm run test
  
  scan-frontend:
    parallelism: 2
    <<: *defaults-node
    # docker:
    #   - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Vulnerability scan front-end
          command: |
            cd frontend
            npm i --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force
        
  scan-backend:
    parallelism: 2
    <<: *defaults-node
    # docker:
    #   - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Vulnerability scan back-end 
          command: |
            cd backend
            npm i --force
            npm audit fix --audit-level=critical --force
            npm audit fix --force

  deploy-infrastructure:
    # parallelism: 10
    # executor: aws-cli/default
    docker:
      - image: cimg/base:2022.01
    
    steps:
      - checkout
      - run: sudo apt-get update && sudo apt-get install -yy less
      - run:
          name: Install AWS CLI dependencies
          # working_directory: ./
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run: 
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"\
              --tags project=udapeople  
              # exit 1
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2
      - run:
          name: Ensure front-end infrastructure exist 
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name  "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople   
              # exit 1
     
      - run:
          name: Store front-end old S3 backet name if exist 
          command: |
            mkdir versions
            export OldWorkflowID=$(aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE |jq  -c ".[]| min_by(.CreationTime)|.StackName" | cut -c 20-26)
            echo $OldWorkflowID > versions/old_stack.txt
            echo old_stack = $(cat versions/old_stack.txt)
            
      - persist_to_workspace:
          root: ./
          paths:
            - versions/ 
      - save_cache:    
          paths: [versions/]
          key: old-workflow-ID
  
      - run:
          name: Add back-end IP to inventory3.txt
          command: |
            cd .circleci/ansible/ 
            echo [all] > inventory3.txt
            unset $BACKEND_IP
            unset $API_URL
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" --query "Reservations[*].Instances[0].PublicIpAddress" --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            # echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> ~/project/frontend/.env
            cat ~/project/frontend/.env
            echo $BACKEND_IP >> inventory3.txt
            cat inventory3.txt
            
            # aws ec2 describe-instances \
            # --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            # --query 'Reservations[*].Instances[*].PublicIpAddress' \
            # --no-paginate --output text || >> inventory3.txt
            cat inventory3.txt
      
      - run:
          name: Add back-end PublicDNS address to file - backend_url.txt
          command: |
            aws ec2 describe-instances \
            --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" \
            --query 'Reservations[*].Instances[*].PublicDnsName' \
            --no-paginate --output text >> .circleci/ansible/backend_url.txt
            cd .circleci/ansible/ && ls -la 
            cat backend_url.txt
           
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/ansible/inventory3.txt
            - .circleci/ansible/backend_url.txt
            - frontend/.env
            - versions/old_stack.txt
           
        
            
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
               
  configure-infrastructure:
    # parallelism: 10
    docker:
      # Docker image here that supports Ansible
      # - image: python:3.8-alpine3.14
      - image: cimg/base:2022.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]
          
      # attach workspace
      - attach_workspace:
          at: ./

      - run:
          command: |
                apk add --no-cache \
                python3 \
                py3-pip \
                && pip3 install --upgrade pip \
                && pip3 install \
                awscli \
                && rm -rf /var/cache/apk/*
                apk add --update ansible
            
      - run:
          name: Configure backend server
          command: |
            # Your code here
            pwd && ls -la
            cd .circleci/ansible && ls -la
            cat inventory3.txt
            ansible-playbook -i inventory3.txt configure-server.yml
            
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail


  smoke-test-web-site:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com"
            # Test if website exists
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi   
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
         
  run-migrations:
    # Docker image here that supports NodeJS
    docker:
    - image: circleci/node:13.8.0
    # <<: *defaults-node
    steps:
    # Checkout code from git
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install AWS CLI dependencies
          working_directory: ./
          command: |
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
     
      - run:
          name: check API_URL variable
          command: |
            pwd
            cd backend && ls -la 
            echo $API_URL
            cd .. && ls -la
            cd frontend
            cat .env

      - run:
          name: Run DB migrations
          working_directory: ./
          command: |
            # Your code here
            pwd
            cd backend && ls -la
            npm -v
            node -v
            npm i 
            npm audit fix
            npm i migrations@1.0.3
          
            # npm audit fix --audit-level=critical --force
            # npm audit fix --force
            
            sudo npm run migrations > migration.txt
            export migration_status=$(cat migration.txt | grep -c "has been executed successfully")
           
            
            echo $migration_status > migration_status.txt
            cat migration.txt
            cat migration_status.txt


      - run:
          name: Check migration results 
          command: |
            # Your code here
            pwd & ls -la
            cd backend
            pwd & ls -la
            cat migration.txt
            if grep -q "has been executed successfully." migration.txt;\
            then echo "0" > migr_stat;\
            else echo "1" > migr_stat;\
            fi
       
            # then
            #   echo "0" > migr_stat
            # else
            #   echo "1" > migr_stat
              
              # curl -H "Content-Type: text/plain" -H \
              # "token: 130ac090-6749-4202-95d0-c1746a2dca81" --request PUT --data "1" \
              # https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            # fi
            
      - persist_to_workspace:
          root: ./
          paths: 
            - .circleci/ansible/inventory3.txt
            - .circleci/ansible/api_url.txt
            - backend/migration.txt
            - backend/migration_status.txt
            - backend/migr_stat

     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  build-and-deploy-new-frontend:
    <<: *defaults-node
    
    steps:
    # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]
      - attach_workspace:
          at: ./
      - run:
          name: Build and zip frontend artifacts
          command: |
            cd frontend
            pwd && ls -la
            npm install
            npm run build
            ls -la
            tar -czvf frontend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz dist
            ls -la
            
      - run:
          name: Install AWS CLI dependencies
          command: |
            pwd
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            pwd
            cd frontend
            aws s3 ls >> backets.txt
            aws s3 cp dist s3://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
      - persist_to_workspace:
          root: ./
          paths: 
            - frontend/
            - backend-${CIRCLE_WORKFLOW_ID:0:7}.tar.gz
            
  build-new-backend:
    <<: *defaults-node
   
    steps:
      # Checkout code from git
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]
      
      - attach_workspace:
          at: ./
            
      - run:
          name: Build and zip backend artifacts
          command: |
            cd backend 
            pwd && ls -la
            npm install
            npm run build
            cd ..
            tar -C backend -czvf backend-artifact.tar.gz .
            ls -la
            pwd
            mkdir .circleci/ansible/roles/deploy/files/
            cd .circleci/ansible/roles/deploy/files/
            cp /home/circleci/project/backend-artifact.tar.gz . 
            ls -la
       
      - persist_to_workspace:
          root: ./
          paths: 
            - ./
            

     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  deploy-backend:
    docker:
      - image: cimg/base:2022.01
    # docker:
    #   - image: python:3.8-alpine3.14
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["72:be:9e:fb:18:14:95:08:bb:4b:b7:76:e9:52:ac:11"]
      - attach_workspace:
          at: ./
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Install dependencies
          command: |
            echo -e '[defaults]\nhost_key_checking = false' > ansible.cfg
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install python3
            sudo apt install ansible
      - run:
          name: Deploy backend ansible playbook 'deploy-backend.yml'
          command: |
            # your code here
            pwd & ls -la
            cd .circleci/ansible
            echo "Contents  of 'ansible' files directory "
            ls -la
            cat inventory3.txt
            # echo "Contents  of the 'roles/deploy/files' directory "
            # ls -la roles/deploy/files
            # echo "Contents  of the 'roles/deploy/' directory "
            # ls -la roles/deploy/
            #  echo "Contents  of the 'roles/configure-prometheus-node-exporter/files' directory "
            # ls -la roles/configure-prometheus-node-exporter/files
            echo "Start of the 'deploy-backend.yml' playbook"
            ansible-playbook -i inventory3.txt deploy-backend.yml
      
      - persist_to_workspace:
          root: ./
          paths: 
            - ./
           
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  smoke-test:
    docker:
      - image: cimg/base:2022.01
      # - image: amazon/aws-cli 
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install python3
            # sudo apt install ansible
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
      - run:
          name: Get backend url and test
          working_directory: ./frontend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" --query "Reservations[*].Instances[*].PublicIpAddress" --no-paginate --output text)
            export BACKEND_URL=$(aws ec2 describe-instances --filters "Name=tag:Name,Values='backend-${CIRCLE_WORKFLOW_ID:0:7}'" --query "Reservations[*].Instances[*].PublicDnsName" --no-paginate --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            # export API_URL2="http://${BACKEND_URL}:3030"
            echo "$API_URL/api/status"
            curl "$API_URL/api/status"
            if curl -s "$API_URL/api/status" | grep "ok"
            then
              (exit 0)
            else
              (exit 1)
            fi

      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-s3-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              (exit 0)
            else
              (exit 1)
            fi

      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
  
  cloudfront-update:
    docker:
      - image: cimg/base:2022.01
      # - image: amazon/aws-cli 
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo apt-get update
            
            if /usr/local/bin/aws --version
            then
              echo "OK, awscli is installed"
            else
              sudo apt install awscli
            fi
            # curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            # unzip awscliv2.zip
            # ./aws/install
            aws --version
      
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Update cloudfront distribution
          command: |
            ls versions
            cd versions
            cat old_stack.txt
            export OldWorkflowID=$(cat old_stack.txt | tail -n 1)
            echo "OldWorkflowID: "$OldWorkflowID
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            export CIRCLE_WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
            pwd && ls -la
            cd ../.circleci/files
            echo $OldWorkflowID 
            # aws cloudformation update-stack --use-previous-template --stack-name InitialStack --parameters ParameterKey="WorkflowID",ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation deploy --template-file cloudfront.yml --stack-name cloudfront --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" 
            
        # aws cloudformation update-stack --use-previous-template --stack-name cloudfront --parameters ParameterKey=WorkflowID,ParameterValue=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Remove old stacks and S3 buckets
          command: |
            aws s3 ls
            ls versions
            cd versions
            OldWorkflowID=$(cat old_stack.txt | tail -n 1)
            echo "OldWorkflowID: "$OldWorkflowID
            echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
           
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}"!="$OldWorkflowID" ]] 
            
            then
              echo "-----Delete process started---------"
              aws s3 rm s3://udapeople-s3-$OldWorkflowID --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkflowID"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkflowID"
              echo "-----Delete process finished successfully ---------"
            else
              echo "-----Clean up process failed ---------"
            fi
            aws s3 ls
      # Here's where you will add some code to rollback on failure  
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #     event: on_fail

  cleanup:
    docker:
      - image: cimg/base:2022.01
    steps: 
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: set default region 
          command:  |
            aws configure set default.region us-west-2      
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo apt-get update && sudo apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            aws s3 ls
      
      # - restore_cache:
      #     keys: [old-workflow-ID]
      # - attach_workspace:
      #     at: ./
      # - run:
      #     name: Remove old stacks and files
      #     command: |
      #       ls versions
      #       cd versions
      #       OldWorkflowID=$(cat $(ls -t | tail -n 1))
      #       echo "OldWorkflowID: "$OldWorkflowID
      #       echo CIRCLE_WORKFLOW_ID: "${CIRCLE_WORKFLOW_ID:0:7}"
           
      #       if [[ "${CIRCLE_WORKFLOW_ID:0:7}"!="$OldWorkflowID" ]] 
            
      #       then
      #         echo "-----Delete process started---------"
      #         aws s3 rm s3://udapeople-s3-$OldWorkflowID --recursive
      #         # aws s3 rb s3://udapeople-s3-$OldWorkflowID
      #         aws cloudformation delete-stack --stack-name "udapeople-backend-$OldWorkflowID"
      #         aws cloudformation delete-stack --stack-name "udapeople-frontend-$OldWorkflowID"
      #         echo "-----Delete process finished successfully ---------"
      #       else
      #         echo "-----Clean up process failed ---------"
      #       fi
      #       aws s3 ls
      # - destroy-environment:
      #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      #     event: on_fail    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - scan-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-backend,test-frontend]
          filters:
            branches:
              only: [master]   
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - build-and-deploy-new-frontend:
          requires: [run-migrations]
      - build-new-backend:
          requires: [build-and-deploy-new-frontend]
      - deploy-backend:
          requires: [build-new-backend]
      - smoke-test-web-site:
          requires: [deploy-backend, build-and-deploy-new-frontend]
      - smoke-test:
          requires: [deploy-backend, build-and-deploy-new-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
